/*
By default the stdout produced by the commands executed in all processes is ignored.
Setting the echo directive to true you can forward the process stdout to the current
top running process stdout file, showing it in the shell terminal.
*/
//process.echo = true

/*
Add conda environment for workshop
*/
//process.conda = "${HOME}/miniconda3/envs/visualize"

params{

    input = "${projectDir}/ampliseq_results"
    metadata = "${projectDir}/metadata.tsv"
    ioi = "treatment"
    ordioi = "ordered_item_of_interest.csv"
    outdir = "results"
    rare = 0
    controls = ""
    srs = false
    mock = ""
    negative = ""
}


my_home_dir="$HOME"

process.outdir="results"

process {
    cpus = 2
    memory = 8.GB
    time = '1 hour'
    withName:REPORT01BARPLOT{
        container = 'lorentzb/microbiome_analyst:1.1'
    }
}

includeConfig 'conf/base.conf'
includeConfig 'conf/gacrc.conf'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
// lifted from lines 237-268 of nf-core/ampliseq/nextflow.config 
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

manifest {
    name            = 'lorentzben/visualize-ampliseq'
    author          = """Benjamin Lorentz"""
    homePage        = 'https://github.com/lorentzben/visualize-ampliseq'
    description     = """Amplicon sequencing analysis visualization workflow"""
    mainScript      = 'main.nf'
    nextflowVersion = '!>=22.04.5'
    version         = '1.2.2'
}